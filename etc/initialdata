use strict;
use warnings;

our @Queues = (
    { 
        Name              => 'Change Management',
        Description       => 'Queue for change management requests',
        Lifecycle         => 'Change Management',
        CorrespondAddress => "",
        CommentAddress    => "",
    },
);

our @CustomFields = (
    {
        Name        => 'Change Category',
        EntryHint   => 'High-level categorization of the requested change',
        Type        => 'SelectSingle',
        LookupType  => 'RT::Queue-RT::Ticket',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        RenderType  => 'Dropdown',
        Values      => [
            { Name => 'Configuration Change',   SortOrder => 1 },
            { Name => 'OS Patching',            SortOrder => 2 },
            { Name => 'Firmware Update',        SortOrder => 3 },
            { Name => 'Software Update',        SortOrder => 4 },
            { Name => 'New Software Install',   SortOrder => 5 },
            { Name => 'Hardware Repair',        SortOrder => 6 },
            { Name => 'New Hardware Install',   SortOrder => 7 },
            { Name => 'Project Implementation', SortOrder => 7 },
        ],
        SortOrder   => 1
    },
    {
        Name        => 'Change Type',
        EntryHint   => 'Kind of service change being requested',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'SelectSingle',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        RenderType  => 'Dropdown',
        Values      => [
            { Name => 'Standard',  SortOrder => 1 },
            { Name => 'Normal',    SortOrder => 2 },
            { Name => 'Emergency', SortOrder => 3 },
        ],
        SortOrder   => 2
    },
    {
        Name        => 'Change Completed',
        EntryHint   => 'Date when this change the change was completed',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'DateTime',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        SortOrder   => 3,
    },
    {
        Name        => 'Rollback Plan',
        EntryHint   => 'Explain the backout plan to restore normal operations',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'Text',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        SortOrder   => 4,
    },
);

our @Groups = (
    {
        Name        => 'Change Review Team',
        Description => 'People responsible for approving change requests',
    },
);

our @CustomRoles = (
    {
        Name        => 'Change Reviewer',
        Description => 'The person asked to review the change request',
        ApplyTo     => 'Change Management',
        MaxValues   => 1,
    },
    {
        Name        => 'Change Implementor',
        Description => 'The person asked to implement the change request',
        ApplyTo     => 'Change Management',
        MaxValues   => 1,
    },
);

#
# This is an example of how to make a custom field have a default value.
# As most changes will be Standard, it makes sense to use it as the default.
# You can similarly make other custom fields defined above have default values
# by providing the name of the custom field to Load (like Change Type is below)
# and changing Values to be the default value of the field (similar to how Standard
# is set below).
#
# Remember that the custom field name and default values are case sensitive!
#
our @Final = sub {
    my $queue_obj = RT::Queue->new(RT->SystemUser);
    my $queue     = 'Change Management';
    $queue_obj->Load($queue);
    die "Failed to load queue $queue" unless $queue_obj->Id;

    my $cf = RT::CustomField->new(RT->SystemUser);
    my ($ret, $msg) = $cf->Load('Change Type');
    die $msg unless $ret;

    if ( $cf->id && $cf->SupportDefaultValues ) {
        ($ret, $msg) = $cf->SetDefaultValues(
            Object => $queue_obj,
            Values => 'Standard',
        );
        die $msg unless $ret;
    } else {
        die "Could not set default for: ".$cf->Name;
    }
};
