use strict;
use warnings;

our @Queues = (
    { 
        Name              => 'Change Management',
        Description       => 'Queue for change management requests',
        Lifecycle         => 'Change Management',
        CorrespondAddress => "",
        CommentAddress    => "",
    },
);

our @CustomFields = (
    {
        Name        => 'Change Category',
        EntryHint   => 'High-level categorization of the requested change',
        Type        => 'SelectSingle',
        LookupType  => 'RT::Queue-RT::Ticket',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        RenderType  => 'Dropdown',
        Values      => [
            { Name => 'Configuration Change',   SortOrder => 1 },
            { Name => 'OS Patching',            SortOrder => 2 },
            { Name => 'Firmware Update',        SortOrder => 3 },
            { Name => 'Software Update',        SortOrder => 4 },
            { Name => 'New Software Install',   SortOrder => 5 },
            { Name => 'Hardware Repair',        SortOrder => 6 },
            { Name => 'New Hardware Install',   SortOrder => 7 },
            { Name => 'Project Implementation', SortOrder => 7 },
        ],
        SortOrder   => 1
    },
    {
        Name        => 'Change Type',
        EntryHint   => 'Kind of service change being requested',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'SelectSingle',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        RenderType  => 'Dropdown',
        Values      => [
            { Name => 'Standard',  SortOrder => 1 },
            { Name => 'Normal',    SortOrder => 2 },
            { Name => 'Emergency', SortOrder => 3 },
        ],
        SortOrder   => 2
    },
    {
        Name        => 'Change Completed',
        EntryHint   => 'Date when this change the change was completed',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'DateTime',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        SortOrder   => 3,
    },
    {
        Name        => 'Rollback Plan',
        EntryHint   => 'Explain the backout plan to restore normal operations',
        LookupType  => 'RT::Queue-RT::Ticket',
        Type        => 'Text',
        ApplyTo     => ['Change Management'],
        MaxValues   => 1,
        SortOrder   => 4,
    },
);

our @Groups = (
    {
        Name        => 'Change Review Team',
        Description => 'People responsible for approving change requests',
    },
);

our @CustomRoles = (
    {
        Name        => 'Change Reviewer',
        Description => 'The person asked to review the change request',
        ApplyTo     => 'Change Management',
        MaxValues   => 1,
    },
    {
        Name        => 'Change Implementor',
        Description => 'The person asked to implement the change request',
        ApplyTo     => 'Change Management',
        MaxValues   => 1,
    },
);

# 
# Create some saved searches; these will form the basis of the dashboard below. Add more
# to suit your organization's needs.
#
our @Attributes = (
    { Name => 'Search - Changes Scheduled, Next 7 Days',
      Description => 'Change management requests due in the next 7 days', # loc
      Content     =>
      { Format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__Subject__</a>/TITLE:Subject',}
                 . q{Due,'CF.{Change Type}', 'CF.{Change Category}'},
        Query    => 'Queue = \'Change Management\' AND Status = \'approved\' AND \'due\' <= \'7 days\'',
        OrderBy  => 'due ASC',
      },
    },
    { Name => 'Search - Changes Deployed, Last 30 Days',
      Description => 'Change management requests completed in the last 30 days', # loc
      Content     =>
      { Format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__Subject__</a>/TITLE:Subject',}
                 . q{'CF.{Change Completed}','CF.{Change Type}', 'CF.{Change Category}'},
        Query    => 'Queue = \'Change Management\' AND Status = \'deployed\' AND \'CF.{Change Completed}\' >= \'30 days ago\'',
        OrderBy  => 'due ASC',
      },
    },
);

our @Final = sub {
    #
    # This is an example of how to make a custom field have a default value.
    # As most changes will be Standard, it makes sense to use it as the default.
    # You can similarly make other custom fields defined above have default values
    # by providing the name of the custom field to Load (like Change Type is below)
    # and changing Values to be the default value of the field (similar to how Standard
    # is set below).
    #
    # Remember that the custom field name and default values are case sensitive!
    #
    my $queue_obj = RT::Queue->new(RT->SystemUser);
    my $queue     = 'Change Management';
    $queue_obj->Load($queue);
    die "Failed to load queue $queue" unless $queue_obj->Id;

    my $cf = RT::CustomField->new(RT->SystemUser);
    my ($ret, $msg) = $cf->Load('Change Type');
    die $msg unless $ret;

    if ( $cf->id && $cf->SupportDefaultValues ) {
        ($ret, $msg) = $cf->SetDefaultValues(
            Object => $queue_obj,
            Values => 'Standard',
        );
        die $msg unless $ret;
    } else {
        die "Could not set default for: ".$cf->Name;
    }

    # Create a change management dashboard.
    # Combine this with the Calendar extension for an even more informative dashboard experience!
    my $dashboard = RT::Dashboard->new( RT->SystemUser );
    ( $ret, $msg ) = $dashboard->Save(
        Name    => 'Change Management',
        Privacy => join( '-', ref( RT->System ), RT->System->Id ),
    );

    if ($ret) {
        my @searches;
        for my $search_name ( 'Changes Scheduled, Next 7 Days', 'Changes Deployed, Last 30 Days' ) {
            my ($search) = RT::System->new( RT->SystemUser )->Attributes->Named( 'Search - ' . $search_name );
            if ($search) {
                push @searches,
                    {
                    pane         => 'body',
                    portlet_type => 'search',
                    id           => $search->Id,
                    description  => "Saved Search: $search_name",
                    privacy      => join( '-', ref( RT->System ), RT->System->Id ),
                    };
            }
            else {
                RT->Logger->error("Couldn't find search $search_name");
            }
        }

        my $panes = {
            body => [
                @searches,
            ],
            sidebar => [
                {   pane         => 'body',
                    portlet_type => 'component',
                    component    => 'QuickCreate',
                    description  => 'QuickCreate',
                    path         => '/Elements/QuickCreate',
                },
                {   pane         => 'sidebar',
                    portlet_type => 'component',
                    component    => 'MyReminders',
                    description  => 'MyReminders',
                    path         => '/Elements/MyReminders',
                },
                {   pane         => 'sidebar',
                    portlet_type => 'component',
                    component    => 'Dashboards',
                    description  => 'Dashboards',
                    path         => '/Elements/Dashboards',
                },
                {   pane         => 'sidebar',
                    portlet_type => 'component',
                    component    => 'RefreshHomepage',
                    description  => 'RefreshHomepage',
                    path         => '/Elements/RefreshHomepage',
                },
            ]
        };

        # fill content
        my ( $ret, $msg ) = $dashboard->Update( Panes => $panes );
        if ( !$ret ) {
            RT->Logger->error("Couldn't update content for dashboard Change Management: $msg");
        }
    }
    else {
        RT->Logger->error("Couldn't create dashboard Change Management: $msg");
    }
};
